/* The following code was generated by JFlex 1.4.3 on 21/10/20 15:07 */

package principal;
import static principal.Tokens.*;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 21/10/20 15:07 from the specification file
 * <tt>C:/Users/elmer/Desktop/Proyecto-Compiladores/src/principal/Lexer.flex</tt>
 */
class Lexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\3\1\4\2\0\1\3\22\0\1\55\1\53\1\0\1\57"+
    "\1\57\1\44\1\57\1\0\1\46\1\47\1\42\1\40\1\3\1\41"+
    "\1\54\1\43\12\2\1\27\1\52\1\50\1\37\1\51\1\57\1\0"+
    "\1\32\1\35\2\1\1\33\14\1\1\34\10\1\3\0\1\45\1\1"+
    "\1\0\1\13\1\16\1\12\1\14\1\5\1\22\1\30\1\24\1\20"+
    "\2\1\1\15\1\23\1\6\1\11\1\25\1\1\1\10\1\17\1\7"+
    "\1\26\1\21\1\1\1\31\1\1\1\36\1\57\1\0\1\57\43\0"+
    "\1\57\22\0\1\57\12\0\1\57\41\0\1\56\7\0\1\56\3\0"+
    "\1\56\5\0\1\56\6\0\1\56\uff05\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\1\1\2\1\3\1\1\1\4\1\5\20\3\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\6\1\23\1\24\7\3"+
    "\1\25\11\3\1\26\10\3\1\27\1\30\1\31\2\6"+
    "\1\32\14\3\1\33\22\3\1\0\1\6\1\34\1\0"+
    "\7\3\1\24\1\35\10\3\1\36\2\3\1\37\1\40"+
    "\15\3\1\0\1\41\12\3\1\42\2\3\1\43\7\3"+
    "\1\44\2\3\1\45\5\3\1\41\1\46\7\3\1\47"+
    "\1\50\34\3\1\51\1\3\1\52\2\3\1\53\6\3"+
    "\1\54\1\55\1\56\1\57\1\60\1\61\6\3\1\62"+
    "\4\3\1\63\13\3\1\64\2\3\1\65\1\66\1\3"+
    "\1\67\1\70\1\71\5\3\1\72\1\3\1\73\1\3"+
    "\1\74\1\3\1\75\1\3\1\76\1\77\1\100\2\3"+
    "\1\101\1\3\1\102";

  private static int [] zzUnpackAction() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\60\0\140\0\220\0\300\0\60\0\360\0\u0120"+
    "\0\u0150\0\u0180\0\u01b0\0\u01e0\0\u0210\0\u0240\0\u0270\0\u02a0"+
    "\0\u02d0\0\u0300\0\u0330\0\u0360\0\u0390\0\u03c0\0\u03f0\0\u0420"+
    "\0\u0450\0\u0480\0\u03f0\0\u04b0\0\u03f0\0\60\0\u03f0\0\u03f0"+
    "\0\u03f0\0\u03f0\0\u03f0\0\u04e0\0\u0510\0\u0510\0\u0540\0\u0570"+
    "\0\u05a0\0\u05d0\0\u0600\0\u0630\0\u0660\0\140\0\u0690\0\u06c0"+
    "\0\u06f0\0\u0720\0\u0750\0\u0780\0\u07b0\0\u07e0\0\u0810\0\u0840"+
    "\0\u0870\0\u08a0\0\u08d0\0\u0900\0\u0930\0\u0960\0\u0990\0\u09c0"+
    "\0\60\0\u03f0\0\u03f0\0\u09f0\0\u0a20\0\60\0\u0a50\0\u0a80"+
    "\0\u0ab0\0\u0ae0\0\u0b10\0\u0b40\0\u0b70\0\u0ba0\0\u0bd0\0\u0c00"+
    "\0\u0c30\0\u0c60\0\140\0\u0c90\0\u0cc0\0\u0cf0\0\u0d20\0\u0d50"+
    "\0\u0d80\0\u0db0\0\u0de0\0\u0e10\0\u0e40\0\u0e70\0\u0ea0\0\u0ed0"+
    "\0\u0f00\0\u0f30\0\u0f60\0\u0f90\0\u0fc0\0\u0ff0\0\u1020\0\60"+
    "\0\u1050\0\u1080\0\u10b0\0\u10e0\0\u1110\0\u1140\0\u1170\0\u11a0"+
    "\0\140\0\140\0\u11d0\0\u1200\0\u1230\0\u1260\0\u1290\0\u12c0"+
    "\0\u12f0\0\u1320\0\140\0\u1350\0\u1380\0\140\0\140\0\u13b0"+
    "\0\u13e0\0\u1410\0\u1440\0\u1470\0\u14a0\0\u14d0\0\u1500\0\u1530"+
    "\0\u1560\0\u1590\0\u15c0\0\u15f0\0\u1620\0\u03f0\0\u1650\0\u1680"+
    "\0\u16b0\0\u16e0\0\u1710\0\u1740\0\u1770\0\u17a0\0\u17d0\0\u1800"+
    "\0\140\0\u1830\0\u1860\0\140\0\u1890\0\u18c0\0\u18f0\0\u1920"+
    "\0\u1950\0\u1980\0\u19b0\0\140\0\u19e0\0\u1a10\0\140\0\u1a40"+
    "\0\u1a70\0\u1aa0\0\u1ad0\0\u1b00\0\60\0\140\0\u1b30\0\u1b60"+
    "\0\u1b90\0\u1bc0\0\u1bf0\0\u1c20\0\u1c50\0\140\0\u1c80\0\u1cb0"+
    "\0\u1ce0\0\u1d10\0\u1d40\0\u1d70\0\u1da0\0\u1dd0\0\u1e00\0\u1e30"+
    "\0\u1e60\0\u1e90\0\u1ec0\0\u1ef0\0\u1f20\0\u1f50\0\u1f80\0\u1fb0"+
    "\0\u1fe0\0\u2010\0\u2040\0\u2070\0\u20a0\0\u20d0\0\u2100\0\u2130"+
    "\0\u2160\0\u2190\0\u21c0\0\140\0\u21f0\0\140\0\u2220\0\u2250"+
    "\0\140\0\u2280\0\u22b0\0\u22e0\0\u2310\0\u2340\0\u2370\0\140"+
    "\0\140\0\140\0\140\0\140\0\140\0\u23a0\0\u23d0\0\u2400"+
    "\0\u2430\0\u2460\0\u2490\0\140\0\u24c0\0\u24f0\0\u2520\0\u2550"+
    "\0\140\0\u2580\0\u25b0\0\u25e0\0\u2610\0\u2640\0\u2670\0\u26a0"+
    "\0\u26d0\0\u2700\0\u2730\0\u2760\0\140\0\u2790\0\u27c0\0\140"+
    "\0\140\0\u27f0\0\140\0\u03f0\0\u03f0\0\u2820\0\u2850\0\u2880"+
    "\0\u28b0\0\u28e0\0\140\0\u2910\0\140\0\u2940\0\140\0\u2970"+
    "\0\140\0\u29a0\0\140\0\140\0\140\0\u29d0\0\u2a00\0\140"+
    "\0\u2a30\0\140";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\3\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\22\1\23\1\24\1\25\1\26\1\3\1\27"+
    "\7\3\1\30\1\31\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\5"+
    "\2\27\61\0\2\3\2\0\22\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\1\27\1\4"+
    "\2\0\32\27\1\0\5\27\1\0\6\27\1\46\1\0"+
    "\2\27\3\0\1\5\51\0\1\5\3\0\2\3\2\0"+
    "\1\3\1\47\6\3\1\50\1\3\1\51\7\3\1\27"+
    "\1\3\1\52\5\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\6\3\1\53\13\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\54\5\3\1\55\13\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\3\3\1\56\16\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\4\3"+
    "\1\57\1\3\1\60\1\3\1\61\11\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\3\1\62\20\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\1\63"+
    "\21\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\1\64\3\3\1\65\15\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\4\3\1\66\15\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\67\12\3\1\70\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\3\1\71\20\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\72\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\6\3\1\73\13\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\74\12\3\1\75\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\6\3\1\76\13\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\3\3\1\77"+
    "\15\3\1\100\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\27\2\0\32\27\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\37\0\1\101\21\0\2\27"+
    "\2\0\32\27\1\0\1\102\4\27\1\0\7\27\1\0"+
    "\2\27\1\0\1\27\1\4\2\0\32\27\1\0\1\27"+
    "\1\103\3\27\1\0\6\27\1\46\1\0\2\27\1\0"+
    "\2\27\2\0\32\27\1\0\2\27\1\104\1\105\1\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\27\2\0\32\27"+
    "\1\106\5\27\1\0\7\27\1\0\2\27\1\0\1\27"+
    "\1\46\2\0\32\27\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\2\3\1\107\17\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\13\3\1\110\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\2\3\1\111\2\3\1\112\14\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\2\3\1\113\17\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\3\1\114"+
    "\20\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\6\3\1\115\13\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\13\3\1\116\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\3\1\117\10\3\1\120\7\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\7\3\1\121\12\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\6\3\1\122"+
    "\13\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\7\3\1\123\12\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\5\3\1\124\4\3\1\125\1\3\1\126"+
    "\5\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\1\127\21\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\22\3\1\27\1\130\6\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\10\3\1\131"+
    "\11\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\1\3\1\132\20\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\3\1\133\20\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\5\3\1\134\4\3\1\135\7\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\3\3\1\136\16\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\10\3\1\137"+
    "\11\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\2\3\1\140\17\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\141\21\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\5\3"+
    "\1\142\14\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\4\3\1\143\6\3"+
    "\1\144\6\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\11\3\1\145\10\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\104\1\0\1\146\22\104\1\27\7\104\1\0"+
    "\2\27\1\147\2\27\1\0\7\27\1\146\1\104\1\27"+
    "\1\0\2\105\1\0\1\150\22\105\1\27\7\105\1\0"+
    "\5\27\1\0\7\27\1\151\1\105\1\27\1\0\2\3"+
    "\2\0\1\152\3\3\1\153\15\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\16\3\1\154\3\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\6\3\1\155"+
    "\13\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\156\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\13\3\1\157\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\22\3\1\27\1\160\6\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\10\3\1\161\11\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\22\3\1\27\6\3\1\162\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\12\3\1\163\7\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\164\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\1\165\21\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\12\3\1\166\7\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\3\3\1\167"+
    "\16\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\2\3\1\170\4\3\1\171"+
    "\12\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\4\3\1\172\15\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\3\3\1\173\16\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\6\3\1\174\13\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\175\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\4\3\1\176\15\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\4\3\1\177\15\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\3\3"+
    "\1\200\4\3\1\201\11\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\2\3"+
    "\1\202\17\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\7\3\1\203\12\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\12\3\1\204\7\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\4\3\1\205\15\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\1\3"+
    "\1\206\20\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\1\207\21\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\2\3\1\210\15\3\1\211\1\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\3\1\212\12\3\1\213\5\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\10\3\1\214\11\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\146\1\0"+
    "\23\146\1\0\7\146\3\0\1\215\12\0\2\146\2\0"+
    "\2\27\2\0\32\27\1\0\3\27\1\216\1\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\151\1\0\1\150\22\151"+
    "\1\0\7\151\16\0\2\151\2\0\2\3\2\0\3\3"+
    "\1\217\16\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\1\3\1\220\20\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\13\3\1\221\6\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\2\3\1\222\17\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\13\3"+
    "\1\223\6\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\1\224\21\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\225\21\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\2\3"+
    "\1\226\17\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\1\3\1\227\20\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\1\3\1\230\20\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\231\21\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\232\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\3\3\1\233\16\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\234\21\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\10\3\1\235"+
    "\11\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\236\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\6\3\1\237\13\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\240\21\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\21\3\1\241\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\6\3\1\242\13\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\6\3\1\243\13\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\4\3\1\244"+
    "\15\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\7\3\1\245\12\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\2\3\1\246\17\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\3\3\1\247\16\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\250\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\13\3\1\251\6\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\5\3\1\252\14\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\6\3"+
    "\1\253\13\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\13\3\1\254\6\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\43\0\1\255\15\0\2\3\2\0\4\3\1\256\15\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\5\3\1\257\14\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\3\1\260\20\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\13\3"+
    "\1\261\6\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\11\3\1\262\10\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\1\3\1\263\20\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\3\1\264\20\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\3\3"+
    "\1\265\16\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\4\3\1\266\15\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\6\3\1\267\13\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\16\3\1\270\3\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\21\3"+
    "\1\271\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\14\3\1\272\5\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\13\3\1\273\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\3\1\274\20\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\16\3\1\275"+
    "\3\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\13\3\1\276\6\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\3\1\277\20\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\7\3\1\300\12\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\4\3\1\301"+
    "\15\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\302\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\22\3\1\27\1\303\6\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\1\304"+
    "\21\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\13\3\1\305\6\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\7\3\1\306\12\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\5\3\1\307\14\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\310\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\6\3\1\311\13\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\5\3\1\312\14\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\13\3"+
    "\1\313\6\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\7\3\1\314\12\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\2\3\1\315\17\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\21\3\1\316\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\22\3\1\27"+
    "\2\3\1\317\4\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\1\320\21\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\5\3\1\321\14\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\1\322"+
    "\21\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\2\3\1\323\17\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\4\3\1\324\15\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\325\21\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\3\3\1\326\16\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\5\3\1\327\14\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\330\21\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\12\3\1\331"+
    "\7\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\6\3\1\332\13\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\13\3\1\333\6\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\7\3\1\334\12\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\20\3\1\335"+
    "\1\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\6\3\1\336\13\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\6\3\1\337\13\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\12\3\1\340\7\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\3\3\1\341"+
    "\16\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\4\3\1\342\15\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\3\3\1\343\16\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\344\21\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\1\345\21\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\5\3\1\346\14\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\22\3\1\27\3\3\1\347\1\350\1\351\1\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\3\1\352\20\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\2\3\1\353"+
    "\17\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\354\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\16\3\1\355\3\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\1\3\1\356\20\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\13\3\1\357"+
    "\6\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\360\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\12\3\1\361\7\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\7\3\1\362\12\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\6\3\1\363"+
    "\13\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\6\3\1\364\13\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\12\3\1\365\7\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\12\3\1\366\7\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\2\3\1\367"+
    "\17\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\1\3\1\370\20\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\371\21\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\4\3"+
    "\1\372\15\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\2\3\1\373\17\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\4\3\1\374\15\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\4\3\1\375\15\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\2\3"+
    "\1\376\17\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\6\3\1\377\13\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\4\3\1\u0100\15\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\4\3\1\u0101\15\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\7\3"+
    "\1\u0102\12\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\10\3\1\u0103\11\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\22\3\1\u0104\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\22\3"+
    "\1\u0105\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\4\3\1\u0106\15\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\2\3\1\u0107\17\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\6\3"+
    "\1\u0108\13\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\10\3\1\u0109\11\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\6\3\1\u010a\13\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\3\3\1\u010b\16\3\1\27\7\3\1\0\5\27"+
    "\1\0\7\27\1\0\2\27\1\0\2\3\2\0\6\3"+
    "\1\u010c\13\3\1\27\7\3\1\0\5\27\1\0\7\27"+
    "\1\0\2\27\1\0\2\3\2\0\3\3\1\u010d\16\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\1\u010e\21\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\3\3\1\u010f\16\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\1\u0110\21\3"+
    "\1\27\7\3\1\0\5\27\1\0\7\27\1\0\2\27"+
    "\1\0\2\3\2\0\10\3\1\u0111\11\3\1\27\7\3"+
    "\1\0\5\27\1\0\7\27\1\0\2\27\1\0\2\3"+
    "\2\0\1\u0112\21\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\3\3\1\u0113"+
    "\16\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\3\3\1\u0114\16\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\12\3\1\u0115\7\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\3\3\1\u0116\16\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27\1\0\2\3\2\0\6\3\1\u0117"+
    "\13\3\1\27\7\3\1\0\5\27\1\0\7\27\1\0"+
    "\2\27\1\0\2\3\2\0\4\3\1\u0118\15\3\1\27"+
    "\7\3\1\0\5\27\1\0\7\27\1\0\2\27\1\0"+
    "\2\3\2\0\1\3\1\u0119\20\3\1\27\7\3\1\0"+
    "\5\27\1\0\7\27\1\0\2\27\1\0\2\3\2\0"+
    "\4\3\1\u011a\15\3\1\27\7\3\1\0\5\27\1\0"+
    "\7\27\1\0\2\27";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10848];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\1\1\11\3\1\1\11\27\1\1\11\42\1\1\11"+
    "\4\1\1\11\37\1\1\0\1\1\1\11\1\0\43\1"+
    "\1\0\37\1\1\11\155\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[282];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    public String lexeme;


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Lexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  Lexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 172) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Tokens yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 3: 
          { lexeme=yytext(); return Identificador;
          }
        case 67: break;
        case 12: 
          { lexeme=yytext(); return Modulo;
          }
        case 68: break;
        case 15: 
          { lexeme=yytext(); return Pcerrar;
          }
        case 69: break;
        case 51: 
          { lexeme=yytext(); return Mientras;
          }
        case 70: break;
        case 39: 
          { lexeme=yytext(); return Coseno;
          }
        case 71: break;
        case 59: 
          { lexeme=yytext(); return Instanciar;
          }
        case 72: break;
        case 45: 
          { lexeme=yytext(); return Eliminar;
          }
        case 73: break;
        case 57: 
          { lexeme=yytext(); return Publicas;
          }
        case 74: break;
        case 60: 
          { lexeme=yytext(); return Constructor;
          }
        case 75: break;
        case 46: 
          { lexeme=yytext(); return Estatico;
          }
        case 76: break;
        case 26: 
          { lexeme=yytext(); return Distintoque;
          }
        case 77: break;
        case 50: 
          { lexeme=yytext(); return Devolver;
          }
        case 78: break;
        case 37: 
          { lexeme=yytext(); return Hacer;
          }
        case 79: break;
        case 5: 
          { return Linea;
          }
        case 80: break;
        case 36: 
          { lexeme=yytext(); return Falso;
          }
        case 81: break;
        case 52: 
          { lexeme=yytext(); return Logaritmo;
          }
        case 82: break;
        case 21: 
          { lexeme=yytext(); return Or;
          }
        case 83: break;
        case 6: 
          { lexeme=yytext(); return ErrorVariable;
          }
        case 84: break;
        case 11: 
          { lexeme=yytext(); return Division;
          }
        case 85: break;
        case 29: 
          { lexeme=yytext(); return Raiz;
          }
        case 86: break;
        case 47: 
          { lexeme=yytext(); return Escribir;
          }
        case 87: break;
        case 32: 
          { lexeme=yytext(); return Sino;
          }
        case 88: break;
        case 1: 
          { lexeme=yytext(); return Numero;
          }
        case 89: break;
        case 28: 
          { lexeme=yytext(); return Comentario;
          }
        case 90: break;
        case 24: 
          { lexeme=yytext(); return Masmas;
          }
        case 91: break;
        case 54: 
          { lexeme=yytext(); return Protegido;
          }
        case 92: break;
        case 34: 
          { lexeme=yytext(); return Clase;
          }
        case 93: break;
        case 63: 
          { lexeme=yytext(); return Incrementar;
          }
        case 94: break;
        case 17: 
          { lexeme=yytext(); return Mayorque;
          }
        case 95: break;
        case 42: 
          { lexeme=yytext(); return Incluir;
          }
        case 96: break;
        case 14: 
          { lexeme=yytext(); return Pabrir;
          }
        case 97: break;
        case 20: 
          { lexeme=yytext(); return Real;
          }
        case 98: break;
        case 55: 
          { lexeme=yytext(); return Principal;
          }
        case 99: break;
        case 64: 
          { lexeme=yytext(); return Propiedades;
          }
        case 100: break;
        case 40: 
          { lexeme=yytext(); return Cadena;
          }
        case 101: break;
        case 25: 
          { lexeme=yytext(); return Menosmenos;
          }
        case 102: break;
        case 23: 
          { lexeme=yytext(); return Igualque;
          }
        case 103: break;
        case 58: 
          { lexeme=yytext(); return Destructor;
          }
        case 104: break;
        case 19: 
          { lexeme=yytext(); return Punto;
          }
        case 105: break;
        case 33: 
          { lexeme=yytext(); return ComentarioG;
          }
        case 106: break;
        case 9: 
          { lexeme=yytext(); return Resta;
          }
        case 107: break;
        case 44: 
          { lexeme=yytext(); return Entonces;
          }
        case 108: break;
        case 41: 
          { lexeme=yytext(); return Boleano;
          }
        case 109: break;
        case 49: 
          { lexeme=yytext(); return Tangente;
          }
        case 110: break;
        case 43: 
          { lexeme=yytext(); return Metodos;
          }
        case 111: break;
        case 30: 
          { lexeme=yytext(); return Leer;
          }
        case 112: break;
        case 61: 
          { lexeme=yytext(); return CadenaAReal;
          }
        case 113: break;
        case 56: 
          { lexeme=yytext(); return Privado;
          }
        case 114: break;
        case 16: 
          { lexeme=yytext(); return Menorque;
          }
        case 115: break;
        case 31: 
          { lexeme=yytext(); return Seno;
          }
        case 116: break;
        case 66: 
          { lexeme=yytext(); return CadenaABoleano;
          }
        case 117: break;
        case 2: 
          { lexeme=yytext(); return ERROR;
          }
        case 118: break;
        case 62: 
          { lexeme=yytext(); return Decrementar;
          }
        case 119: break;
        case 22: 
          { lexeme=yytext(); return Si;
          }
        case 120: break;
        case 53: 
          { lexeme=yytext(); return Verdadero;
          }
        case 121: break;
        case 10: 
          { lexeme=yytext(); return Multiplicacion;
          }
        case 122: break;
        case 13: 
          { lexeme=yytext(); return Exponencial;
          }
        case 123: break;
        case 38: 
          { lexeme=yytext(); return Entero;
          }
        case 124: break;
        case 27: 
          { lexeme=yytext(); return And;
          }
        case 125: break;
        case 18: 
          { lexeme=yytext(); return Puntocoma;
          }
        case 126: break;
        case 7: 
          { lexeme=yytext(); return Igual;
          }
        case 127: break;
        case 4: 
          { /*Ignore*/
          }
        case 128: break;
        case 65: 
          { lexeme=yytext(); return CadenaAEntero;
          }
        case 129: break;
        case 35: 
          { lexeme=yytext(); return Desde;
          }
        case 130: break;
        case 8: 
          { lexeme=yytext(); return Suma;
          }
        case 131: break;
        case 48: 
          { lexeme=yytext(); return Extiende;
          }
        case 132: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return null;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
